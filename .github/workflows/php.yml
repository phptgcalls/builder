name: Build PHAR and upload to release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      PHP_VERSION: '8.2'
      PHAR_TARGET_BASENAME: liveptoto.phar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@2.32.0
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, gmp
          coverage: none

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Set VERSION (strip leading v if present)
        id: set_version
        run: |
          TAG='${{ github.event.release.tag_name }}'
          VERSION="${TAG#v}"
          VERSION="${VERSION#V}"
          echo "Tag from event: $TAG"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build PHAR into v/<version>/liveptoto.phar
        env:
          VERSION: ${{ env.VERSION }}
          PHAR_NAME: ${{ env.PHAR_TARGET_BASENAME }}
        run: |
          set -euo pipefail

          if [ -z "${VERSION:-}" ]; then
            echo "VERSION is empty â€” cannot continue"
            exit 1
          fi

          OUT_DIR="v/$VERSION"
          OUT_PATH="$OUT_DIR/$PHAR_NAME"

          mkdir -p "$OUT_DIR"
          rm -f "$OUT_PATH"

          # Create a temporary PHP build script (avoids YAML/heredoc nesting issues)
          cat > build-phar.php <<'PHP'
          <?php
          $out = $argv[1] ?? null;
          if (!$out) { fwrite(STDERR, "No output path provided\n"); exit(1); }

          if (file_exists($out)) unlink($out);

          $phar = new Phar($out, 0, basename($out));
          $phar->startBuffering();

          $dirs = ['src', 'vendor'];
          foreach ($dirs as $d) {
              if (is_dir($d)) {
                  $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($d, RecursiveDirectoryIterator::SKIP_DOTS));
                  foreach ($it as $file) {
                      $filePath = $file->getRealPath();
                      $local = ltrim(str_replace(getcwd(), '', $filePath), '/');
                      $phar->addFile($filePath, $local);
                  }
              }
          }

          foreach (['composer.json','README.md','LICENSE'] as $f) {
              if (file_exists($f)) $phar->addFile($f, $f);
          }

          $stub = <<<'STUB'
          #!/usr/bin/env php
          <?php
          Phar::mapPhar();
          if (file_exists('phar://' . __FILE__ . '/vendor/autoload.php')) {
              require 'phar://' . __FILE__ . '/vendor/autoload.php';
          }
          __HALT_COMPILER();
          STUB;

          $phar->setStub($stub);
          $phar->stopBuffering();
          echo "PHAR created at $out\n";
          PHP

          # Run the PHP builder with the target path
          php -d phar.readonly=0 build-phar.php "$OUT_PATH"

      - name: Verify PHAR exists
        run: |
          ls -l "v/${{ env.VERSION }}/${{ env.PHAR_TARGET_BASENAME }}"
          file "v/${{ env.VERSION }}/${{ env.PHAR_TARGET_BASENAME }}" || true

      - name: Upload PHAR to the Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: v/${{ env.VERSION }}/${{ env.PHAR_TARGET_BASENAME }}
          asset_name: v/${{ env.VERSION }}/${{ env.PHAR_TARGET_BASENAME }}
          asset_content_type: application/octet-stream
